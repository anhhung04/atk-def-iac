---
- name: Install required packages
  ansible.builtin.apt:
    name:
      - iptables
      - iptables-persistent
      - ipset
    state: present
    update_cache: true

- name: Stop Wireguard server
  ansible.builtin.systemd:
    name: "wg-quick@game"
    state: stopped

- name: Upload VPN server
  ansible.builtin.copy:
    src: "./out/server.conf"
    dest: "/etc/wireguard/game.conf"
    owner: root
    group: root
    mode: "0600"

- name: Start Wireguard server
  ansible.builtin.systemd:
    name: "wg-quick@game"
    state: started
    enabled: true

- name: Enable iptables-persistent
  ansible.builtin.systemd:
    name: netfilter-persistent
    state: started
    enabled: true

- name: Enable ipset
  ansible.builtin.systemd:
    name: ipset
    state: started
    enabled: true

- name: Upload Network configs
  ansible.builtin.copy:
    src: "./10-vpn.yaml"
    dest: "/etc/netplan/10-vpn.yaml"
    owner: root
    group: root
    mode: "0600"

- name: Remove cloud-init
  ansible.builtin.file:
    path: "/etc/netplan/50-cloud-init.yaml"
    state: absent

- name: Turn off cloud-init
  ansible.builtin.copy:
    content: |
      network: {config: disabled}
    dest: "/etc/cloud/cloud.cfg.d/99-disable-network-config.cfg"
    owner: root
    group: root
    mode: "0644"

- name: Apply new network configs
  ansible.builtin.command:
    cmd: netplan apply
  register: netplan_apply
  changed_when: netplan_apply.rc == 2

- name: Upload ipset config
  ansible.builtin.copy:
    src: "./ipset"
    dest: "/etc/network/if-pre-up.d/ipset"
    owner: root
    group: root
    mode: "0644"

- name: Run ipset
  ansible.builtin.command:
    cmd: /etc/network/if-pre-up.d/ipset
    creates: /tmp/ipset_conf
  register: ipset
  changed_when: false

- name: Enable IP forwarding
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    state: present
    sysctl_set: true
    reload: true

- name: Set default policies
  ansible.builtin.iptables:
    chain: "{{ item.chain }}"
    policy: "{{ item.policy }}"
    table: filter
  loop:
    - { chain: INPUT, policy: ACCEPT }
    - { chain: FORWARD, policy: DROP }
    - { chain: OUTPUT, policy: ACCEPT }

- name: Allow traffic from 10.60.0.0/16 to 10.80.0.0/16
  community.general.ufw:
    from_ip: "10.60.0.0/16"
    to_ip: "10.80.0.0/16"
    proto: any
    state: enabled
    rule: allow
    route: true

- name: Allow traffic from 10.10.10.0/24 to 10.80.0.0/16
  community.general.ufw:
    from_ip: "10.10.10.0/24"
    to_ip: "10.80.0.0/16"
    proto: any
    state: enabled
    rule: allow
    route: true

- name: Allow traffic from 10.80.0.0/16 to 10.10.10.0/24
  community.general.ufw:
    from_ip: "10.80.0.0/16"
    to_ip: "10.10.10.0/24"
    proto: any
    state: enabled
    rule: allow
    route: true

- name: Allow traffic from 10.60.0.0/16 to 10.10.10.0/24
  community.general.ufw:
    from_ip: "10.60.0.0/16"
    to_ip: "10.10.10.0/24"
    proto: any
    state: enabled
    rule: allow
    route: true

- name: Allow traffic from 10.80.0.0/16 to 10.80.0.0/16
  community.general.ufw:
    from_ip: "10.80.0.0/16"
    to_ip: "10.80.0.0/16"
    proto: any
    state: enabled
    rule: allow
    route: true

- name: Setup NAT masquerading
  ansible.builtin.iptables:
    table: nat
    chain: POSTROUTING
    jump: MASQUERADE
    destination: 10.80.0.0/16
    state: present

- name: Dump iptables rules
  ansible.builtin.command:
    cmd: iptables-save
  register: iptables_rules
  changed_when: false

- name: Save iptables rules
  ansible.builtin.copy:
    content: "{{ iptables_rules.stdout }}"
    dest: "/etc/iptables/rules.v4"
    owner: root
    group: root
    mode: "0600"

- name: Upload scripts
  ansible.builtin.copy:
    src: "./scripts"
    dest: "/root"
    owner: root
    group: root
    mode: "0744"

- name: Closed network
  ansible.builtin.command:
    cmd: /root/scripts/closed_network.sh
    creates: /tmp/closed_network
  register: closed_network
  changed_when: false
